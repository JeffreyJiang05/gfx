#ifndef TUPLE_GENERATED_HPP
#define TUPLE_GENERATED_HPP

#include "rflt.hpp"

#define RFLT_DETAIL_NAMESPACE_BEGIN namespace _details {
#define RFLT_DETAIL_NAMESPACE_END }

RFLT_DETAIL_NAMESPACE_BEGIN

template <typename T> constexpr auto make_tuple_from_struct(T&& val) {
	constexpr std::size_t size = count_fields_helper<std::remove_reference_t<T>>(0);

	if constexpr (size == 1) {
	    auto&& [_0] = std::forward<T>(val);
	    return make_tuple_from_args<T>(std::forward<decltype((_0))>(_0));
	} else if constexpr (size == 2) {
	auto&& [_0, _1] = std::forward<T>(val);
	return make_tuple_from_args<T>(std::forward<decltype((_0))>(_0),
								   std::forward<decltype((_1))>(_1));
	} else if constexpr (size == 3) {
	auto&& [_0, _1, _2] = std::forward<T>(val);
	return make_tuple_from_args<T>(std::forward<decltype((_0))>(_0),
								   std::forward<decltype((_1))>(_1),
								   std::forward<decltype((_2))>(_2));
	} else if constexpr (size == 4) {
	auto&& [_0, _1, _2, _3] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3));
	} else if constexpr (size == 5) {
	auto&& [_0, _1, _2, _3, _4] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4));
	} else if constexpr (size == 6) {
	auto&& [_0, _1, _2, _3, _4, _5] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5));
	} else if constexpr (size == 7) {
	auto&& [_0, _1, _2, _3, _4, _5, _6] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6));
	} else if constexpr (size == 8) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7));
	} else if constexpr (size == 9) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8));
	} else if constexpr (size == 10) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9));
	} else if constexpr (size == 11) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10));
	} else if constexpr (size == 12) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11] =
		std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11));
	} else if constexpr (size == 13) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12] =
		std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12));
	} else if constexpr (size == 14) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13] =
		std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13));
	} else if constexpr (size == 15) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14] =
		std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14));
	} else if constexpr (size == 16) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15));
	} else if constexpr (size == 17) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16));
	} else if constexpr (size == 18) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17));
	} else if constexpr (size == 19) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18));
	} else if constexpr (size == 20) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19));
	} else if constexpr (size == 21) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20));
	} else if constexpr (size == 22) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21));
	} else if constexpr (size == 23) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22));
	} else if constexpr (size == 24) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23));
	} else if constexpr (size == 25) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24] =
		std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24));
	} else if constexpr (size == 26) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25] =
		std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25));
	} else if constexpr (size == 27) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26] =
		std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26));
	} else if constexpr (size == 28) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27] =
		std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27));
	} else if constexpr (size == 29) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28));
	} else if constexpr (size == 30) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29));
	} else if constexpr (size == 31) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30));
	} else if constexpr (size == 32) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31));
	} else if constexpr (size == 33) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32));
	} else if constexpr (size == 34) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33));
	} else if constexpr (size == 35) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34));
	} else if constexpr (size == 36) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35));
	} else if constexpr (size == 37) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36));
	} else if constexpr (size == 38) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37] =
		std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37));
	} else if constexpr (size == 39) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38] =
		std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38));
	} else if constexpr (size == 40) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39] =
		std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39));
	} else if constexpr (size == 41) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40] =
		std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40));
	} else if constexpr (size == 42) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41));
	} else if constexpr (size == 43) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42));
	} else if constexpr (size == 44) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43));
	} else if constexpr (size == 45) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44));
	} else if constexpr (size == 46) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45));
	} else if constexpr (size == 47) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46));
	} else if constexpr (size == 48) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47));
	} else if constexpr (size == 49) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48));
	} else if constexpr (size == 50) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49));
	} else if constexpr (size == 51) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50] =
		std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50));
	} else if constexpr (size == 52) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51] =
		std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51));
	} else if constexpr (size == 53) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52] =
		std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52));
	} else if constexpr (size == 54) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53] =
		std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53));
	} else if constexpr (size == 55) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54));
	} else if constexpr (size == 56) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55));
	} else if constexpr (size == 57) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56));
	} else if constexpr (size == 58) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57));
	} else if constexpr (size == 59) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58));
	} else if constexpr (size == 60) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59));
	} else if constexpr (size == 61) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60));
	} else if constexpr (size == 62) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61));
	} else if constexpr (size == 63) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62));
	} else if constexpr (size == 64) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63] =
		std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63));
	} else if constexpr (size == 65) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64] =
		std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64));
	} else if constexpr (size == 66) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65] =
		std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65));
	} else if constexpr (size == 67) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66] =
		std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66));
	} else if constexpr (size == 68) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67));
	} else if constexpr (size == 69) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67, _68] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67),
		std::forward<decltype((_68))>(_68));
	} else if constexpr (size == 70) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67, _68, _69] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67),
		std::forward<decltype((_68))>(_68), std::forward<decltype((_69))>(_69));
	} else if constexpr (size == 71) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67, _68, _69, _70] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67),
		std::forward<decltype((_68))>(_68), std::forward<decltype((_69))>(_69),
		std::forward<decltype((_70))>(_70));
	} else if constexpr (size == 72) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67, _68, _69, _70, _71] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67),
		std::forward<decltype((_68))>(_68), std::forward<decltype((_69))>(_69),
		std::forward<decltype((_70))>(_70), std::forward<decltype((_71))>(_71));
	} else if constexpr (size == 73) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67, _68, _69, _70, _71, _72] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67),
		std::forward<decltype((_68))>(_68), std::forward<decltype((_69))>(_69),
		std::forward<decltype((_70))>(_70), std::forward<decltype((_71))>(_71),
		std::forward<decltype((_72))>(_72));
	} else if constexpr (size == 74) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67, _68, _69, _70, _71, _72, _73] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67),
		std::forward<decltype((_68))>(_68), std::forward<decltype((_69))>(_69),
		std::forward<decltype((_70))>(_70), std::forward<decltype((_71))>(_71),
		std::forward<decltype((_72))>(_72), std::forward<decltype((_73))>(_73));
	} else if constexpr (size == 75) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67, _68, _69, _70, _71, _72, _73, _74] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67),
		std::forward<decltype((_68))>(_68), std::forward<decltype((_69))>(_69),
		std::forward<decltype((_70))>(_70), std::forward<decltype((_71))>(_71),
		std::forward<decltype((_72))>(_72), std::forward<decltype((_73))>(_73),
		std::forward<decltype((_74))>(_74));
	} else if constexpr (size == 76) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67, _68, _69, _70, _71, _72, _73, _74, _75] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67),
		std::forward<decltype((_68))>(_68), std::forward<decltype((_69))>(_69),
		std::forward<decltype((_70))>(_70), std::forward<decltype((_71))>(_71),
		std::forward<decltype((_72))>(_72), std::forward<decltype((_73))>(_73),
		std::forward<decltype((_74))>(_74), std::forward<decltype((_75))>(_75));
	} else if constexpr (size == 77) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67, _68, _69, _70, _71, _72, _73, _74, _75, _76] =
		std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67),
		std::forward<decltype((_68))>(_68), std::forward<decltype((_69))>(_69),
		std::forward<decltype((_70))>(_70), std::forward<decltype((_71))>(_71),
		std::forward<decltype((_72))>(_72), std::forward<decltype((_73))>(_73),
		std::forward<decltype((_74))>(_74), std::forward<decltype((_75))>(_75),
		std::forward<decltype((_76))>(_76));
	} else if constexpr (size == 78) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77] =
		std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67),
		std::forward<decltype((_68))>(_68), std::forward<decltype((_69))>(_69),
		std::forward<decltype((_70))>(_70), std::forward<decltype((_71))>(_71),
		std::forward<decltype((_72))>(_72), std::forward<decltype((_73))>(_73),
		std::forward<decltype((_74))>(_74), std::forward<decltype((_75))>(_75),
		std::forward<decltype((_76))>(_76), std::forward<decltype((_77))>(_77));
	} else if constexpr (size == 79) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78] =
		std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67),
		std::forward<decltype((_68))>(_68), std::forward<decltype((_69))>(_69),
		std::forward<decltype((_70))>(_70), std::forward<decltype((_71))>(_71),
		std::forward<decltype((_72))>(_72), std::forward<decltype((_73))>(_73),
		std::forward<decltype((_74))>(_74), std::forward<decltype((_75))>(_75),
		std::forward<decltype((_76))>(_76), std::forward<decltype((_77))>(_77),
		std::forward<decltype((_78))>(_78));
	} else if constexpr (size == 80) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79] =
		std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67),
		std::forward<decltype((_68))>(_68), std::forward<decltype((_69))>(_69),
		std::forward<decltype((_70))>(_70), std::forward<decltype((_71))>(_71),
		std::forward<decltype((_72))>(_72), std::forward<decltype((_73))>(_73),
		std::forward<decltype((_74))>(_74), std::forward<decltype((_75))>(_75),
		std::forward<decltype((_76))>(_76), std::forward<decltype((_77))>(_77),
		std::forward<decltype((_78))>(_78), std::forward<decltype((_79))>(_79));
	} else if constexpr (size == 81) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79,
			_80] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67),
		std::forward<decltype((_68))>(_68), std::forward<decltype((_69))>(_69),
		std::forward<decltype((_70))>(_70), std::forward<decltype((_71))>(_71),
		std::forward<decltype((_72))>(_72), std::forward<decltype((_73))>(_73),
		std::forward<decltype((_74))>(_74), std::forward<decltype((_75))>(_75),
		std::forward<decltype((_76))>(_76), std::forward<decltype((_77))>(_77),
		std::forward<decltype((_78))>(_78), std::forward<decltype((_79))>(_79),
		std::forward<decltype((_80))>(_80));
	} else if constexpr (size == 82) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79,
			_80, _81] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67),
		std::forward<decltype((_68))>(_68), std::forward<decltype((_69))>(_69),
		std::forward<decltype((_70))>(_70), std::forward<decltype((_71))>(_71),
		std::forward<decltype((_72))>(_72), std::forward<decltype((_73))>(_73),
		std::forward<decltype((_74))>(_74), std::forward<decltype((_75))>(_75),
		std::forward<decltype((_76))>(_76), std::forward<decltype((_77))>(_77),
		std::forward<decltype((_78))>(_78), std::forward<decltype((_79))>(_79),
		std::forward<decltype((_80))>(_80), std::forward<decltype((_81))>(_81));
	} else if constexpr (size == 83) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79,
			_80, _81, _82] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67),
		std::forward<decltype((_68))>(_68), std::forward<decltype((_69))>(_69),
		std::forward<decltype((_70))>(_70), std::forward<decltype((_71))>(_71),
		std::forward<decltype((_72))>(_72), std::forward<decltype((_73))>(_73),
		std::forward<decltype((_74))>(_74), std::forward<decltype((_75))>(_75),
		std::forward<decltype((_76))>(_76), std::forward<decltype((_77))>(_77),
		std::forward<decltype((_78))>(_78), std::forward<decltype((_79))>(_79),
		std::forward<decltype((_80))>(_80), std::forward<decltype((_81))>(_81),
		std::forward<decltype((_82))>(_82));
	} else if constexpr (size == 84) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79,
			_80, _81, _82, _83] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67),
		std::forward<decltype((_68))>(_68), std::forward<decltype((_69))>(_69),
		std::forward<decltype((_70))>(_70), std::forward<decltype((_71))>(_71),
		std::forward<decltype((_72))>(_72), std::forward<decltype((_73))>(_73),
		std::forward<decltype((_74))>(_74), std::forward<decltype((_75))>(_75),
		std::forward<decltype((_76))>(_76), std::forward<decltype((_77))>(_77),
		std::forward<decltype((_78))>(_78), std::forward<decltype((_79))>(_79),
		std::forward<decltype((_80))>(_80), std::forward<decltype((_81))>(_81),
		std::forward<decltype((_82))>(_82), std::forward<decltype((_83))>(_83));
	} else if constexpr (size == 85) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79,
			_80, _81, _82, _83, _84] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67),
		std::forward<decltype((_68))>(_68), std::forward<decltype((_69))>(_69),
		std::forward<decltype((_70))>(_70), std::forward<decltype((_71))>(_71),
		std::forward<decltype((_72))>(_72), std::forward<decltype((_73))>(_73),
		std::forward<decltype((_74))>(_74), std::forward<decltype((_75))>(_75),
		std::forward<decltype((_76))>(_76), std::forward<decltype((_77))>(_77),
		std::forward<decltype((_78))>(_78), std::forward<decltype((_79))>(_79),
		std::forward<decltype((_80))>(_80), std::forward<decltype((_81))>(_81),
		std::forward<decltype((_82))>(_82), std::forward<decltype((_83))>(_83),
		std::forward<decltype((_84))>(_84));
	} else if constexpr (size == 86) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79,
			_80, _81, _82, _83, _84, _85] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67),
		std::forward<decltype((_68))>(_68), std::forward<decltype((_69))>(_69),
		std::forward<decltype((_70))>(_70), std::forward<decltype((_71))>(_71),
		std::forward<decltype((_72))>(_72), std::forward<decltype((_73))>(_73),
		std::forward<decltype((_74))>(_74), std::forward<decltype((_75))>(_75),
		std::forward<decltype((_76))>(_76), std::forward<decltype((_77))>(_77),
		std::forward<decltype((_78))>(_78), std::forward<decltype((_79))>(_79),
		std::forward<decltype((_80))>(_80), std::forward<decltype((_81))>(_81),
		std::forward<decltype((_82))>(_82), std::forward<decltype((_83))>(_83),
		std::forward<decltype((_84))>(_84), std::forward<decltype((_85))>(_85));
	} else if constexpr (size == 87) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79,
			_80, _81, _82, _83, _84, _85, _86] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67),
		std::forward<decltype((_68))>(_68), std::forward<decltype((_69))>(_69),
		std::forward<decltype((_70))>(_70), std::forward<decltype((_71))>(_71),
		std::forward<decltype((_72))>(_72), std::forward<decltype((_73))>(_73),
		std::forward<decltype((_74))>(_74), std::forward<decltype((_75))>(_75),
		std::forward<decltype((_76))>(_76), std::forward<decltype((_77))>(_77),
		std::forward<decltype((_78))>(_78), std::forward<decltype((_79))>(_79),
		std::forward<decltype((_80))>(_80), std::forward<decltype((_81))>(_81),
		std::forward<decltype((_82))>(_82), std::forward<decltype((_83))>(_83),
		std::forward<decltype((_84))>(_84), std::forward<decltype((_85))>(_85),
		std::forward<decltype((_86))>(_86));
	} else if constexpr (size == 88) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79,
			_80, _81, _82, _83, _84, _85, _86, _87] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67),
		std::forward<decltype((_68))>(_68), std::forward<decltype((_69))>(_69),
		std::forward<decltype((_70))>(_70), std::forward<decltype((_71))>(_71),
		std::forward<decltype((_72))>(_72), std::forward<decltype((_73))>(_73),
		std::forward<decltype((_74))>(_74), std::forward<decltype((_75))>(_75),
		std::forward<decltype((_76))>(_76), std::forward<decltype((_77))>(_77),
		std::forward<decltype((_78))>(_78), std::forward<decltype((_79))>(_79),
		std::forward<decltype((_80))>(_80), std::forward<decltype((_81))>(_81),
		std::forward<decltype((_82))>(_82), std::forward<decltype((_83))>(_83),
		std::forward<decltype((_84))>(_84), std::forward<decltype((_85))>(_85),
		std::forward<decltype((_86))>(_86), std::forward<decltype((_87))>(_87));
	} else if constexpr (size == 89) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79,
			_80, _81, _82, _83, _84, _85, _86, _87, _88] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67),
		std::forward<decltype((_68))>(_68), std::forward<decltype((_69))>(_69),
		std::forward<decltype((_70))>(_70), std::forward<decltype((_71))>(_71),
		std::forward<decltype((_72))>(_72), std::forward<decltype((_73))>(_73),
		std::forward<decltype((_74))>(_74), std::forward<decltype((_75))>(_75),
		std::forward<decltype((_76))>(_76), std::forward<decltype((_77))>(_77),
		std::forward<decltype((_78))>(_78), std::forward<decltype((_79))>(_79),
		std::forward<decltype((_80))>(_80), std::forward<decltype((_81))>(_81),
		std::forward<decltype((_82))>(_82), std::forward<decltype((_83))>(_83),
		std::forward<decltype((_84))>(_84), std::forward<decltype((_85))>(_85),
		std::forward<decltype((_86))>(_86), std::forward<decltype((_87))>(_87),
		std::forward<decltype((_88))>(_88));
	} else if constexpr (size == 90) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79,
			_80, _81, _82, _83, _84, _85, _86, _87, _88, _89] =
		std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67),
		std::forward<decltype((_68))>(_68), std::forward<decltype((_69))>(_69),
		std::forward<decltype((_70))>(_70), std::forward<decltype((_71))>(_71),
		std::forward<decltype((_72))>(_72), std::forward<decltype((_73))>(_73),
		std::forward<decltype((_74))>(_74), std::forward<decltype((_75))>(_75),
		std::forward<decltype((_76))>(_76), std::forward<decltype((_77))>(_77),
		std::forward<decltype((_78))>(_78), std::forward<decltype((_79))>(_79),
		std::forward<decltype((_80))>(_80), std::forward<decltype((_81))>(_81),
		std::forward<decltype((_82))>(_82), std::forward<decltype((_83))>(_83),
		std::forward<decltype((_84))>(_84), std::forward<decltype((_85))>(_85),
		std::forward<decltype((_86))>(_86), std::forward<decltype((_87))>(_87),
		std::forward<decltype((_88))>(_88), std::forward<decltype((_89))>(_89));
	} else if constexpr (size == 91) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79,
			_80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90] =
		std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67),
		std::forward<decltype((_68))>(_68), std::forward<decltype((_69))>(_69),
		std::forward<decltype((_70))>(_70), std::forward<decltype((_71))>(_71),
		std::forward<decltype((_72))>(_72), std::forward<decltype((_73))>(_73),
		std::forward<decltype((_74))>(_74), std::forward<decltype((_75))>(_75),
		std::forward<decltype((_76))>(_76), std::forward<decltype((_77))>(_77),
		std::forward<decltype((_78))>(_78), std::forward<decltype((_79))>(_79),
		std::forward<decltype((_80))>(_80), std::forward<decltype((_81))>(_81),
		std::forward<decltype((_82))>(_82), std::forward<decltype((_83))>(_83),
		std::forward<decltype((_84))>(_84), std::forward<decltype((_85))>(_85),
		std::forward<decltype((_86))>(_86), std::forward<decltype((_87))>(_87),
		std::forward<decltype((_88))>(_88), std::forward<decltype((_89))>(_89),
		std::forward<decltype((_90))>(_90));
	} else if constexpr (size == 92) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79,
			_80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91] =
		std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67),
		std::forward<decltype((_68))>(_68), std::forward<decltype((_69))>(_69),
		std::forward<decltype((_70))>(_70), std::forward<decltype((_71))>(_71),
		std::forward<decltype((_72))>(_72), std::forward<decltype((_73))>(_73),
		std::forward<decltype((_74))>(_74), std::forward<decltype((_75))>(_75),
		std::forward<decltype((_76))>(_76), std::forward<decltype((_77))>(_77),
		std::forward<decltype((_78))>(_78), std::forward<decltype((_79))>(_79),
		std::forward<decltype((_80))>(_80), std::forward<decltype((_81))>(_81),
		std::forward<decltype((_82))>(_82), std::forward<decltype((_83))>(_83),
		std::forward<decltype((_84))>(_84), std::forward<decltype((_85))>(_85),
		std::forward<decltype((_86))>(_86), std::forward<decltype((_87))>(_87),
		std::forward<decltype((_88))>(_88), std::forward<decltype((_89))>(_89),
		std::forward<decltype((_90))>(_90), std::forward<decltype((_91))>(_91));
	} else if constexpr (size == 93) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79,
			_80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92] =
		std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67),
		std::forward<decltype((_68))>(_68), std::forward<decltype((_69))>(_69),
		std::forward<decltype((_70))>(_70), std::forward<decltype((_71))>(_71),
		std::forward<decltype((_72))>(_72), std::forward<decltype((_73))>(_73),
		std::forward<decltype((_74))>(_74), std::forward<decltype((_75))>(_75),
		std::forward<decltype((_76))>(_76), std::forward<decltype((_77))>(_77),
		std::forward<decltype((_78))>(_78), std::forward<decltype((_79))>(_79),
		std::forward<decltype((_80))>(_80), std::forward<decltype((_81))>(_81),
		std::forward<decltype((_82))>(_82), std::forward<decltype((_83))>(_83),
		std::forward<decltype((_84))>(_84), std::forward<decltype((_85))>(_85),
		std::forward<decltype((_86))>(_86), std::forward<decltype((_87))>(_87),
		std::forward<decltype((_88))>(_88), std::forward<decltype((_89))>(_89),
		std::forward<decltype((_90))>(_90), std::forward<decltype((_91))>(_91),
		std::forward<decltype((_92))>(_92));
	} else if constexpr (size == 94) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79,
			_80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92,
			_93] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67),
		std::forward<decltype((_68))>(_68), std::forward<decltype((_69))>(_69),
		std::forward<decltype((_70))>(_70), std::forward<decltype((_71))>(_71),
		std::forward<decltype((_72))>(_72), std::forward<decltype((_73))>(_73),
		std::forward<decltype((_74))>(_74), std::forward<decltype((_75))>(_75),
		std::forward<decltype((_76))>(_76), std::forward<decltype((_77))>(_77),
		std::forward<decltype((_78))>(_78), std::forward<decltype((_79))>(_79),
		std::forward<decltype((_80))>(_80), std::forward<decltype((_81))>(_81),
		std::forward<decltype((_82))>(_82), std::forward<decltype((_83))>(_83),
		std::forward<decltype((_84))>(_84), std::forward<decltype((_85))>(_85),
		std::forward<decltype((_86))>(_86), std::forward<decltype((_87))>(_87),
		std::forward<decltype((_88))>(_88), std::forward<decltype((_89))>(_89),
		std::forward<decltype((_90))>(_90), std::forward<decltype((_91))>(_91),
		std::forward<decltype((_92))>(_92), std::forward<decltype((_93))>(_93));
	} else if constexpr (size == 95) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79,
			_80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92,
			_93, _94] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67),
		std::forward<decltype((_68))>(_68), std::forward<decltype((_69))>(_69),
		std::forward<decltype((_70))>(_70), std::forward<decltype((_71))>(_71),
		std::forward<decltype((_72))>(_72), std::forward<decltype((_73))>(_73),
		std::forward<decltype((_74))>(_74), std::forward<decltype((_75))>(_75),
		std::forward<decltype((_76))>(_76), std::forward<decltype((_77))>(_77),
		std::forward<decltype((_78))>(_78), std::forward<decltype((_79))>(_79),
		std::forward<decltype((_80))>(_80), std::forward<decltype((_81))>(_81),
		std::forward<decltype((_82))>(_82), std::forward<decltype((_83))>(_83),
		std::forward<decltype((_84))>(_84), std::forward<decltype((_85))>(_85),
		std::forward<decltype((_86))>(_86), std::forward<decltype((_87))>(_87),
		std::forward<decltype((_88))>(_88), std::forward<decltype((_89))>(_89),
		std::forward<decltype((_90))>(_90), std::forward<decltype((_91))>(_91),
		std::forward<decltype((_92))>(_92), std::forward<decltype((_93))>(_93),
		std::forward<decltype((_94))>(_94));
	} else if constexpr (size == 96) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79,
			_80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92,
			_93, _94, _95] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67),
		std::forward<decltype((_68))>(_68), std::forward<decltype((_69))>(_69),
		std::forward<decltype((_70))>(_70), std::forward<decltype((_71))>(_71),
		std::forward<decltype((_72))>(_72), std::forward<decltype((_73))>(_73),
		std::forward<decltype((_74))>(_74), std::forward<decltype((_75))>(_75),
		std::forward<decltype((_76))>(_76), std::forward<decltype((_77))>(_77),
		std::forward<decltype((_78))>(_78), std::forward<decltype((_79))>(_79),
		std::forward<decltype((_80))>(_80), std::forward<decltype((_81))>(_81),
		std::forward<decltype((_82))>(_82), std::forward<decltype((_83))>(_83),
		std::forward<decltype((_84))>(_84), std::forward<decltype((_85))>(_85),
		std::forward<decltype((_86))>(_86), std::forward<decltype((_87))>(_87),
		std::forward<decltype((_88))>(_88), std::forward<decltype((_89))>(_89),
		std::forward<decltype((_90))>(_90), std::forward<decltype((_91))>(_91),
		std::forward<decltype((_92))>(_92), std::forward<decltype((_93))>(_93),
		std::forward<decltype((_94))>(_94), std::forward<decltype((_95))>(_95));
	} else if constexpr (size == 97) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79,
			_80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92,
			_93, _94, _95, _96] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67),
		std::forward<decltype((_68))>(_68), std::forward<decltype((_69))>(_69),
		std::forward<decltype((_70))>(_70), std::forward<decltype((_71))>(_71),
		std::forward<decltype((_72))>(_72), std::forward<decltype((_73))>(_73),
		std::forward<decltype((_74))>(_74), std::forward<decltype((_75))>(_75),
		std::forward<decltype((_76))>(_76), std::forward<decltype((_77))>(_77),
		std::forward<decltype((_78))>(_78), std::forward<decltype((_79))>(_79),
		std::forward<decltype((_80))>(_80), std::forward<decltype((_81))>(_81),
		std::forward<decltype((_82))>(_82), std::forward<decltype((_83))>(_83),
		std::forward<decltype((_84))>(_84), std::forward<decltype((_85))>(_85),
		std::forward<decltype((_86))>(_86), std::forward<decltype((_87))>(_87),
		std::forward<decltype((_88))>(_88), std::forward<decltype((_89))>(_89),
		std::forward<decltype((_90))>(_90), std::forward<decltype((_91))>(_91),
		std::forward<decltype((_92))>(_92), std::forward<decltype((_93))>(_93),
		std::forward<decltype((_94))>(_94), std::forward<decltype((_95))>(_95),
		std::forward<decltype((_96))>(_96));
	} else if constexpr (size == 98) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79,
			_80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92,
			_93, _94, _95, _96, _97] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67),
		std::forward<decltype((_68))>(_68), std::forward<decltype((_69))>(_69),
		std::forward<decltype((_70))>(_70), std::forward<decltype((_71))>(_71),
		std::forward<decltype((_72))>(_72), std::forward<decltype((_73))>(_73),
		std::forward<decltype((_74))>(_74), std::forward<decltype((_75))>(_75),
		std::forward<decltype((_76))>(_76), std::forward<decltype((_77))>(_77),
		std::forward<decltype((_78))>(_78), std::forward<decltype((_79))>(_79),
		std::forward<decltype((_80))>(_80), std::forward<decltype((_81))>(_81),
		std::forward<decltype((_82))>(_82), std::forward<decltype((_83))>(_83),
		std::forward<decltype((_84))>(_84), std::forward<decltype((_85))>(_85),
		std::forward<decltype((_86))>(_86), std::forward<decltype((_87))>(_87),
		std::forward<decltype((_88))>(_88), std::forward<decltype((_89))>(_89),
		std::forward<decltype((_90))>(_90), std::forward<decltype((_91))>(_91),
		std::forward<decltype((_92))>(_92), std::forward<decltype((_93))>(_93),
		std::forward<decltype((_94))>(_94), std::forward<decltype((_95))>(_95),
		std::forward<decltype((_96))>(_96), std::forward<decltype((_97))>(_97));
	} else if constexpr (size == 99) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79,
			_80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92,
			_93, _94, _95, _96, _97, _98] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67),
		std::forward<decltype((_68))>(_68), std::forward<decltype((_69))>(_69),
		std::forward<decltype((_70))>(_70), std::forward<decltype((_71))>(_71),
		std::forward<decltype((_72))>(_72), std::forward<decltype((_73))>(_73),
		std::forward<decltype((_74))>(_74), std::forward<decltype((_75))>(_75),
		std::forward<decltype((_76))>(_76), std::forward<decltype((_77))>(_77),
		std::forward<decltype((_78))>(_78), std::forward<decltype((_79))>(_79),
		std::forward<decltype((_80))>(_80), std::forward<decltype((_81))>(_81),
		std::forward<decltype((_82))>(_82), std::forward<decltype((_83))>(_83),
		std::forward<decltype((_84))>(_84), std::forward<decltype((_85))>(_85),
		std::forward<decltype((_86))>(_86), std::forward<decltype((_87))>(_87),
		std::forward<decltype((_88))>(_88), std::forward<decltype((_89))>(_89),
		std::forward<decltype((_90))>(_90), std::forward<decltype((_91))>(_91),
		std::forward<decltype((_92))>(_92), std::forward<decltype((_93))>(_93),
		std::forward<decltype((_94))>(_94), std::forward<decltype((_95))>(_95),
		std::forward<decltype((_96))>(_96), std::forward<decltype((_97))>(_97),
		std::forward<decltype((_98))>(_98));
	} else if constexpr (size == 100) {
	auto&& [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14,
			_15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27,
			_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40,
			_41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53,
			_54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66,
			_67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79,
			_80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92,
			_93, _94, _95, _96, _97, _98, _99] = std::forward<T>(val);
	return make_tuple_from_args<T>(
		std::forward<decltype((_0))>(_0), std::forward<decltype((_1))>(_1),
		std::forward<decltype((_2))>(_2), std::forward<decltype((_3))>(_3),
		std::forward<decltype((_4))>(_4), std::forward<decltype((_5))>(_5),
		std::forward<decltype((_6))>(_6), std::forward<decltype((_7))>(_7),
		std::forward<decltype((_8))>(_8), std::forward<decltype((_9))>(_9),
		std::forward<decltype((_10))>(_10), std::forward<decltype((_11))>(_11),
		std::forward<decltype((_12))>(_12), std::forward<decltype((_13))>(_13),
		std::forward<decltype((_14))>(_14), std::forward<decltype((_15))>(_15),
		std::forward<decltype((_16))>(_16), std::forward<decltype((_17))>(_17),
		std::forward<decltype((_18))>(_18), std::forward<decltype((_19))>(_19),
		std::forward<decltype((_20))>(_20), std::forward<decltype((_21))>(_21),
		std::forward<decltype((_22))>(_22), std::forward<decltype((_23))>(_23),
		std::forward<decltype((_24))>(_24), std::forward<decltype((_25))>(_25),
		std::forward<decltype((_26))>(_26), std::forward<decltype((_27))>(_27),
		std::forward<decltype((_28))>(_28), std::forward<decltype((_29))>(_29),
		std::forward<decltype((_30))>(_30), std::forward<decltype((_31))>(_31),
		std::forward<decltype((_32))>(_32), std::forward<decltype((_33))>(_33),
		std::forward<decltype((_34))>(_34), std::forward<decltype((_35))>(_35),
		std::forward<decltype((_36))>(_36), std::forward<decltype((_37))>(_37),
		std::forward<decltype((_38))>(_38), std::forward<decltype((_39))>(_39),
		std::forward<decltype((_40))>(_40), std::forward<decltype((_41))>(_41),
		std::forward<decltype((_42))>(_42), std::forward<decltype((_43))>(_43),
		std::forward<decltype((_44))>(_44), std::forward<decltype((_45))>(_45),
		std::forward<decltype((_46))>(_46), std::forward<decltype((_47))>(_47),
		std::forward<decltype((_48))>(_48), std::forward<decltype((_49))>(_49),
		std::forward<decltype((_50))>(_50), std::forward<decltype((_51))>(_51),
		std::forward<decltype((_52))>(_52), std::forward<decltype((_53))>(_53),
		std::forward<decltype((_54))>(_54), std::forward<decltype((_55))>(_55),
		std::forward<decltype((_56))>(_56), std::forward<decltype((_57))>(_57),
		std::forward<decltype((_58))>(_58), std::forward<decltype((_59))>(_59),
		std::forward<decltype((_60))>(_60), std::forward<decltype((_61))>(_61),
		std::forward<decltype((_62))>(_62), std::forward<decltype((_63))>(_63),
		std::forward<decltype((_64))>(_64), std::forward<decltype((_65))>(_65),
		std::forward<decltype((_66))>(_66), std::forward<decltype((_67))>(_67),
		std::forward<decltype((_68))>(_68), std::forward<decltype((_69))>(_69),
		std::forward<decltype((_70))>(_70), std::forward<decltype((_71))>(_71),
		std::forward<decltype((_72))>(_72), std::forward<decltype((_73))>(_73),
		std::forward<decltype((_74))>(_74), std::forward<decltype((_75))>(_75),
		std::forward<decltype((_76))>(_76), std::forward<decltype((_77))>(_77),
		std::forward<decltype((_78))>(_78), std::forward<decltype((_79))>(_79),
		std::forward<decltype((_80))>(_80), std::forward<decltype((_81))>(_81),
		std::forward<decltype((_82))>(_82), std::forward<decltype((_83))>(_83),
		std::forward<decltype((_84))>(_84), std::forward<decltype((_85))>(_85),
		std::forward<decltype((_86))>(_86), std::forward<decltype((_87))>(_87),
		std::forward<decltype((_88))>(_88), std::forward<decltype((_89))>(_89),
		std::forward<decltype((_90))>(_90), std::forward<decltype((_91))>(_91),
		std::forward<decltype((_92))>(_92), std::forward<decltype((_93))>(_93),
		std::forward<decltype((_94))>(_94), std::forward<decltype((_95))>(_95),
		std::forward<decltype((_96))>(_96), std::forward<decltype((_97))>(_97),
		std::forward<decltype((_98))>(_98), std::forward<decltype((_99))>(_99));
	}
}

RFLT_DETAIL_NAMESPACE_END

#undef RFLT_DETAIL_NAMESPACE_BEGIN
#undef RFLT_DETAIL_NAMESPACE_END

#endif